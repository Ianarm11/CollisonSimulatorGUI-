function varargout = collisionProject(varargin)
% COLLISIONPROJECT MATLAB code for collisionProject.fig
%      COLLISIONPROJECT, by itself, creates a new COLLISIONPROJECT or raises the existing
%      singleton*.
%
%      H = COLLISIONPROJECT returns the handle to a new COLLISIONPROJECT or the handle to
%      the existing singleton*.
%
%      COLLISIONPROJECT('CALLBACK',hObject,eventData,handles,...) calls the local
%      function named CALLBACK in COLLISIONPROJECT.M with the given input arguments.
%
%      COLLISIONPROJECT('Property','Value',...) creates a new COLLISIONPROJECT or raises the
%      existing singleton*.  Starting from the left, property value pairs are
%      applied to the GUI before collisionProject_OpeningFcn gets called.  An
%      unrecognized property name or invalid value makes property application
%      stop.  All inputs are passed to collisionProject_OpeningFcn via varargin.
%
%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
%      instance to run (singleton)".
%
% See also: GUIDE, GUIDATA, GUIHANDLES

% Edit the above text to modify the response to help collisionProject

% Last Modified by GUIDE v2.5 05-Apr-2018 08:21:03

% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @collisionProject_OpeningFcn, ...
                   'gui_OutputFcn',  @collisionProject_OutputFcn, ...
                   'gui_LayoutFcn',  [] , ...
                   'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT


% --- Executes just before collisionProject is made visible.
function collisionProject_OpeningFcn(hObject, eventdata, handles, varargin)
% This function has no output args, see OutputFcn.
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% varargin   command line arguments to collisionProject (see VARARGIN)

% Choose default command line output for collisionProject
handles.output = hObject;

%Creates a listener for Velocity 1 slider (tag:Velocity1)
handles.sliderListener = addlistener(handles.Velocity1,'ContinuousValueChange',@(hfigure,eventdata) Velocity1ContValCallBack(hObject,eventdata));

%Creates a listener for Velocity 2 slider (tag:slider2
handles.sliderListener = addlistener(handles.slider2,'ContinuousValueChange',@(hFigure,eventdata) slider2ContValCallBack(hObject,eventdata));

%Creates a listener for Mass 1 slider (tag:Mass1)
handles.sliderListener = addlistener(handles.Mass1,'ContinuousValueChange',@(hfigure,eventdata) Mass1ContValCallBack(hObject,eventdata));

%Creates a listener for Mass 2 slider (tag:Mass2)
handles.sliderListener = addlistener(handles.Mass2,'ContinuousValueChange',@(hFigure,eventdata) Mass2ContValCallBack(hObject,eventdata));

%Creates a listener for Font Size slider (tag:Font_size)
handles.sliderListener = addlistener(handles.Font_size,'ContinuousValueChange',@(hFigure,eventdata) Font_sizeContValCallBack(hObject,eventdata));


% Update handles structure
guidata(hObject, handles);

% UIWAIT makes collisionProject wait for user response (see UIRESUME)
% uiwait(handles.figure1);




% --- Outputs from this function are returned to the command line.
function varargout = collisionProject_OutputFcn(hObject, eventdata, handles) 
% varargout  cell array for returning output args (see VARARGOUT);
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Get default command line output from handles structure
varargout{1} = handles.output;


% --- Executes on slider movement.
function Velocity1_Callback(hObject, eventdata, handles)
% hObject    handle to Velocity1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

function Velocity1ContValCallBack(hFigure,eventdata)
handles = guidata(hFigure);
sliderValue = get(handles.Velocity1,'Value');
set(handles.V1_Value,'String',num2str(sliderValue));
fprintf('Velocity 1 value: %f\n',get(handles.Velocity1,'Value'));

% Hints: get(hObject,'Value') returns position of slider
%        get(hObject,'Min') and get(hObject,'Max') to determine range of slider


% --- Executes during object creation, after setting all properties.
function Velocity1_CreateFcn(hObject, eventdata, handles)
% hObject    handle to Velocity1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: slider controls usually have a light gray background.
if isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor',[.9 .9 .9]);
    
end


% --- Executes on slider movement.
function slider2_Callback(hObject, eventdata, handles)
% hObject    handle to slider2 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

function slider2ContValCallBack(hFigure,eventdata)
handles = guidata(hFigure);
sliderValue = get(handles.slider2,'Value');
set(handles.V2_Value,'String',num2str(sliderValue));
fprintf('Velocity 2 Value: %f\n',get(handles.slider2,'Value'));
% Hints: get(hObject,'Value') returns position of slider
%        get(hObject,'Min') and get(hObject,'Max') to determine range of slider


% --- Executes during object creation, after setting all properties.
function slider2_CreateFcn(hObject, eventdata, handles)
% hObject    handle to slider2 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: slider controls usually have a light gray background.
if isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor',[.9 .9 .9]);
end


% --- Executes on slider movement.
function Mass1_Callback(hObject, eventdata, handles)
% hObject    handle to Mass1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

function Mass1ContValCallBack(hFigure,eventdata)
handles = guidata(hFigure);
sliderValue = get(handles.Mass1,'Value');
set(handles.M1,'String',num2str(sliderValue));
fprintf('Mass of object 1: %f\n',get(handles.Mass1,'Value'));
% Hints: get(hObject,'Value') returns position of slider
%        get(hObject,'Min') and get(hObject,'Max') to determine range of slider


% --- Executes during object creation, after setting all properties.
function Mass1_CreateFcn(hObject, eventdata, handles)
% hObject    handle to Mass1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: slider controls usually have a light gray background.
if isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor',[.9 .9 .9]);
end


% --- Executes on slider movement.
function Mass2_Callback(hObject, eventdata, handles)
% hObject    handle to Mass2 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

function Mass2ContValCallBack(hFigure,eventdata)
handles = guidata(hFigure);
sliderValue = get(handles.Mass2,'Value');
set(handles.M2,'String',num2str(sliderValue));
fprintf('Mass of object 2: %f\n',get(handles.Mass2,'Value'));
% Hints: get(hObject,'Value') returns position of slider
%        get(hObject,'Min') and get(hObject,'Max') to determine range of slider


% --- Executes during object creation, after setting all properties.
function Mass2_CreateFcn(hObject, eventdata, handles)
% hObject    handle to Mass2 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: slider controls usually have a light gray background.
if isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor',[.9 .9 .9]);
end


% --- Executes on selection change in Type_of_Collision.
function Type_of_Collision_Callback(hObject, eventdata, handles)
% hObject    handle to Type_of_Collision (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: contents = cellstr(get(hObject,'String')) returns Type_of_Collision contents as cell array
%        contents{get(hObject,'Value')} returns selected item from Type_of_Collision


% --- Executes during object creation, after setting all properties.
function Type_of_Collision_CreateFcn(hObject, eventdata, handles)
% hObject    handle to Type_of_Collision (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: popupmenu controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes on button press in Start.
function Start_Callback(hObject, eventdata, handles)
% hObject    handle to Start (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


% --- Executes on slider movement.
function Font_size_Callback(hObject, eventdata, handles)
% hObject    handle to Font_size (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
handles = guidata(hFigure);
sliderValue = get(handles.Font_size,'Value');
set(handles.title,'String',num2str(sliderValue));
fprintf('The font size is: %f\n',get(handles.Font_size,'Value'));
% Hints: get(hObject,'Value') returns position of slider
%        get(hObject,'Min') and get(hObject,'Max') to determine range of slider


% --- Executes during object creation, after setting all properties.
function Font_size_CreateFcn(hObject, eventdata, handles)
% hObject    handle to Font_size (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: slider controls usually have a light gray background.
if isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor',[.9 .9 .9]);
end
